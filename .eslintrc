{
	"parser": "babel-eslint",
	"extends": "eslint:recommended",
	"ecmaFeatures": {
		"jsx": true,
		"modules": true
	},
	"env": {
		"browser": true,
		"node": true,
		"mocha": true,
		"es6": true
	},
	"rules": {
		// require file to end with single newline
		"eol-last": 2,
		// use the type-safe equality operators === and !== instead of their regular counterparts == and !=
		"eqeqeq": 2,
		// If a variable is never modified, using the const declaration is better
		"prefer-const": 2,
		// disallow trailing spaces at the end of lines
		"no-trailing-spaces": 2,
		// disallow the space around a semicolon
		"semi-spacing": 2,
		// require Space Before Blocks
		"space-before-blocks": [2, { "keywords": "always" }],
		// require space before and after arrow function's arrow
		"arrow-spacing": [2, { "before": true, "after": true }],
		// enforces spacing after commas
		"comma-spacing": [2, {"before": false, "after": true}],
		// we don't want trailing commas in our object literals
		"comma-dangle": [2, "never"],
		// prevent importing from the same module on multiple lines
		"no-duplicate-imports": 2,
		// disallow mixed spaces and tabs for indentation
		"no-mixed-spaces-and-tabs": 2,
		// don't assign something in a return statement
		"no-return-assign": 2,
		// don't concat two literals, just write them as one
		"no-useless-concat": 2,
		// semicolons must be used any place where they are valid.
		"semi": [2, "always"],
		// 'use strict' is unnecessary
		"strict": 2,
		// only allow single quotes in javascript
		"quotes": [2, "single"],
		// Require comparisons to be in a readable order
		"yoda": 2,
		// only allow double quotes for jsx attributes, unless the attr contains quotes (since escaping is impossible)
		"jsx-quotes": [2, "prefer-double"],
		// all components must be defined in the module
		"react/jsx-no-undef": 2,
		// all components should have a display name (es6 transpiler name is acceptable)
		"react/display-name": [2, { "ignoreTranspilerName": false }],
		// closing brackets on new line for multiline component def
		"react/jsx-closing-bracket-location": 2,
		// only add spaces inside object def curlies, not jsx curlies
		"react/jsx-curly-spacing": [2, "never"],
		"react/jsx-indent-props": [2, "tab"],
		"react/jsx-no-duplicate-props": 2,
		// don't mark `React` as unused
		"react/jsx-uses-react": 1,
		// don't marke vars only used in jsx as unused
		"react/jsx-uses-vars": 1,
		// checks for illegal state mutations:
		"react/no-did-mount-set-state": 2,
		"react/no-did-update-set-state": 2,
		"react/no-direct-mutation-state": 1,
		// don't allow unknown props like `class`
		"react/no-unknown-property": 2,
		// don't allow '.jsx' or '.js' extensions in require calls
		"import/extensions": 2,
		// jsx tags should be self closing if they don't have children
		"react/self-closing-comp": 2,
		// multiline jsx should be wrapped in parens
		"react/jsx-wrap-multilines": 2,
		// one space after a ':', no spaces before
		"key-spacing": 2,
		// space between if/for/etc. and (
		"keyword-spacing": 2,
		// try to avoid overusing whitespace
		"no-multiple-empty-lines": 2,
		// require whitespace around {} of single-line blocks
		"block-spacing": 2,
		// don't put extra whitepsace in computed properties
		"computed-property-spacing": 2,
		// require {} around all blocks
		"curly": 2,
		// no space before the ( of a function invocation
		"no-spaced-func": 2,
		// don't put extra whitespace inside of ()
		"space-in-parens": 2,
		// always put space around infix operators
		"space-infix-ops": 2,
		// use camelCase for all variable names, but snake_case is fine in properties
		"camelcase": [2, {"properties": "never"}],
		// keep { on the same line as the block keyword, unless it fits in 1 line
		"brace-style": [2, "1tbs", {"allowSingleLine": true}],
		// don't chain variable declarations, put them each on their own line
		"one-var": [2, "never"],
		// keep consistent whitespace around operators
		"no-multi-spaces": 2,
		// avoid ternary operators that return booleans
		"no-unneeded-ternary": 2,
		// use obj.prop instead of obj['prop']
		"dot-notation": 2,
		// don't use , to chain multiple expressions, use multiple lines
		"no-sequences": 2,
		// pretend vars have block scoping
		"block-scoped-var": 2,
		// use 0.1 instead of .1
		"no-floating-decimal": 2,
		// suggest to use let or const instead of var
		"no-var": 2,
		// don't declare vars in case statements without defining blocks
		"no-case-declarations": 2,
		// warn when array functions don't return in their callback
		"array-callback-return": 2,
		// no more than one ternary at a time
		"no-nested-ternary": 2,
		// be consistent about newlines and .s
		"dot-location": [2, "property"],
		// require () around single arguments in => functions
		"arrow-parens": 2,
		// disallow negating the left operand of relational operators
		"no-unsafe-negation": 2,
		// prevent you from shadowing JS language features
		"no-shadow-restricted-names": 2,
		// disallow spacing between a function call and its ()
		"func-call-spacing": [2, "never"],

		// Ease in new rules as warnings, these should become errors as they are fixed
		// don't allow unused vars and functions. allow unused function params.
		"no-unused-vars": [1, { "args": "none" }],
		// don't rely on variable hoisting
		"no-use-before-define": [1, {"functions": false, "classes": false}],
		// be careful with lambdas in comparisons
		"no-confusing-arrow": 1,

		// This is going to stay a warning just in case people want to push temp code to branches
		// disallow use of console
		"no-console": 1
	},
	"plugins": [
		"import",
		"react"
	],
	"settings": {
		"react": {
			"pragma": "React", // Pragma to use, default to "React"
			"version": "14.0"  // React version, default to the latest React stable release
		}
	}
}
